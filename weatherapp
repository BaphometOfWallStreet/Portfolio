import tkinter as tk
from tkinter import ttk, messagebox
import requests
from PIL import Image, ImageTk
from datetime import datetime, timezone

class RefinedWeatherApp:
    def __init__(self, master):
        self.master = master
        self.configure_gui()
        self.create_widgets()

    def configure_gui(self):
        self.master.title("Refined Weather App")
        self.master.configure(bg='#333')
        self.master.geometry("1920x1080")  # Set initial size

        # Background image
        background_image = Image.open('background.png')
        background_photo = ImageTk.PhotoImage(background_image.resize((1920, 1080), Image.Resampling.LANCZOS))
        self.background_label = tk.Label(self.master, image=background_photo)
        self.background_label.image = background_photo  # Keep a reference!
        self.background_label.place(x=0, y=0, relwidth=1, relheight=1)

    def create_widgets(self):
        self.search_frame = ttk.Frame(self.master, padding="10", relief="flat")
        self.search_frame.place(relx=0.5, rely=0.1, anchor="center")

        self.city_entry = ttk.Entry(self.search_frame, width=30, font=('Arial', 16))
        self.city_entry.grid(row=0, column=0, padx=10, pady=10)

        self.search_button = ttk.Button(self.search_frame, text="Search", command=self.fetch_weather)
        self.search_button.grid(row=0, column=1, padx=10, pady=10)

        self.weather_frame = ttk.Frame(self.master, padding="20", relief="flat")
        self.weather_frame.place(relx=0.5, rely=0.5, anchor="center", relwidth=0.75, relheight=0.6)

        self.weather_icons = {}
        for i, icon_name in enumerate(["temperature", "pressure", "humidity", "description", "wind_speed", "cloudiness", "sunrise", "sunset"]):
            frame = ttk.Frame(self.weather_frame, style='Weather.TFrame')
            frame.grid(row=i // 2, column=i % 2, sticky='ew', padx=5, pady=5)
            label = ttk.Label(frame, font=('Arial', 14), background='lightblue', foreground='black')
            label.pack(padx=10, pady=10, fill='both', expand=True)
            self.weather_icons[icon_name] = label

    def fetch_weather(self):
        city = self.city_entry.get()
        if not city:
            messagebox.showwarning('Warning', 'City name cannot be empty.')
            return

        api_key = 'ENTER_YOUR_API_KEY'
        base_url = "http://api.openweathermap.org/data/2.5/weather?"
        complete_url = f"{base_url}appid={api_key}&q={city}&units=imperial"

        response = requests.get(complete_url)
        weather_data = response.json()

        if weather_data['cod'] != 200:
            messagebox.showerror('Error', 'Failed to get weather data.')
            return

        self.display_weather_info(weather_data)

    def display_weather_info(self, weather_data):
        info = {
            "Temperature": f"{weather_data['main']['temp']} Â°F",
            "Pressure": f"{weather_data['main']['pressure']} hPa",
            "Humidity": f"{weather_data['main']['humidity']}%",
            "Description": weather_data['weather'][0]['description'].capitalize(),
            "Wind Speed": f"{weather_data['wind']['speed']} mph",
            "Cloudiness": f"{weather_data['clouds']['all']}%",
            "Sunrise": self.format_time(weather_data['sys']['sunrise']),
            "Sunset": self.format_time(weather_data['sys']['sunset'])
        }

        for label, text in info.items():
            self.weather_icons[label.lower().replace(' ', '_')]['text'] = f"{label}: {text}"

    def format_time(self, timestamp):
        return datetime.fromtimestamp(timestamp, timezone.utc).strftime('%I:%M:%S %p')

if __name__ == "__main__":
    root = tk.Tk()
    style = ttk.Style()
    style.configure('Weather.TFrame', background='lightblue', relief='raised', borderwidth=2)
    app = RefinedWeatherApp(root)
    root.mainloop()
